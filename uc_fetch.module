<?php

/**
 * @file
 * Ubercart payment method for Fetch Web Payments.
 */

/**
 * Implements hook_payment_method().
 */
function uc_fetch_uc_payment_method() {
  $methods[] = array(
    'id' => 'uc_fetch',
    'name' => t('Fetch Web Payments'),
    'title' => t('Fetch Web Payments'),
    'desc' => t('Process credit card payments with Fetch.'),
    'callback' => 'uc_payment_method_fetch_gateway',
    'redirect' => 'uc_fetch_form',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );
  return $methods;
}

/**
 * Implements hook_menu().
 */
function uc_fetch_menu() {

  $items['uc_fetch/ipn'] = array(
    'title' => 'Fetch Process',
    'page callback' => 'uc_fetch_verify',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['uc_fetch/complete'] = array(
    'title' => 'Order complete',
    'page callback' => 'uc_fetch_complete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Adds Fetch settings to the payment method settings form.
 */
function uc_payment_method_fetch_gateway($op, &$order, $form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'settings':
      $form['fetch']['uc_fetch_account_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Fetch account ID'),
        '#description' => t('Account ID issued by Fetch'),
        '#default_value' => variable_get('uc_fetch_account_id', ''),
      );

      $form['fetch']['uc_fetch_new_order_status'] = array(
        '#type' => 'select',
        '#title' => t('New order status'),
        '#description' => t('The default status for a new order is \'Payment received\'. The first option of the dropdown list will be the default state if \'Payment received\' cannot be found in the database. If you would like this to be set to a different status before redirecting to Fetch select this status here. (optional)'),
        '#options' => _uc_fetch_get_order_state_array(),
        '#default_value' => variable_get('uc_fetch_new_order_status', 'payment_received'),
      );

      $form['fetch']['uc_fetch_success_order_status'] = array(
        '#type' => 'select',
        '#title' => t('Order status when payment successful'),
        '#description' => t('Orders will be moved to this status when a payment is successful. If no option is chosen then the order will be moved to \'In checkout\'. The first option of the dropdown list will be the default state if \'In checkout\' cannot be found in the database. (optional)'),
        '#options' => _uc_fetch_get_order_state_array(),
        '#default_value' => variable_get('uc_fetch_success_order_status', 'in_checkout'),
      );

      $form['fetch']['uc_fetch_failed_order_status'] = array(
        '#type' => 'select',
        '#title' => t('Order status when payment failed'),
        '#description' => t('Orders will be moved to this status when a payment is not successful. If no option is chosen then the order will be moved to \'Payment received\'. The first option of the dropdown list will be the default state if \'Payment received\' cannot be found in the database.(optional)'),
        '#options' => _uc_fetch_get_order_state_array(),
        '#default_value' => variable_get('uc_fetch_failed_order_status', 'payment_received'),
      );

      $form['fetch']['uc_fetch_header_image'] = array(
        '#type' => 'textfield',
        '#title' => t('Header image URL'),
        '#description' => t('URL of image displayed at top of payment page, max size: 750px wide by 90px high, must be URL encoded and stored on secure (HTTPS) server'),
        '#default_value' => variable_get('uc_fetch_header_image', ''),
      );

      $form['fetch']['uc_fetch_header_border_colour'] = array(
        '#type' => 'textfield',
        '#title' => t('Header border colour'),
        '#description' => t('This sets the colour of the bottom border of the payment page header. Values should be in hexadecimal e.g. FFFFFF for white.'),
        '#default_value' => variable_get('uc_fetch_header_border_colour', ''),
      );

      $form['fetch']['uc_fetch_header_background_colour'] = array(
        '#type' => 'textfield',
        '#title' => t('Header background colour'),
        '#description' => t('This sets the colour of the payment page header background. Values should be in hexadecimal e.g. FFFFFF for white.'),
        '#default_value' => variable_get('uc_fetch_header_background_colour', ''),
      );

      $form['fetch']['uc_fetch_save_card'] = array(
        '#type' => 'select',
        '#title' => t('Save card'),
        '#description' => t('Whether the option for saving and tokenising the card details upon a successful payment should be shown to the customer'),
        '#options' => array('1' => 'Yes', '0' => 'No'),
        '#default_value' => variable_get('uc_fetch_save_card', '0'),
      );

      $form['fetch']['uc_fetch_receipt_email'] = array(
        '#type' => 'select',
        '#title' => t('Display receipt email'),
        '#description' => t('Whether the option for sending an emailed payment receipt from Fetch should be shown to the customer.'),
        '#options' => array('1' => 'Yes', '0' => 'No'),
        '#default_value' => variable_get('uc_fetch_receipt_email', '1'),
      );

      $form['fetch']['uc_fetch_receipt_email'] = array(
        '#type' => 'select',
        '#title' => t('Display receipt email'),
        '#description' => t('Whether the option for sending an emailed payment receipt from Fetch should be shown to the customer.'),
        '#options' => array('1' => 'Yes', '0' => 'No'),
        '#default_value' => variable_get('uc_fetch_receipt_email', '1'),
      );

      $form['fetch']['uc_fetch_server'] = array(
        '#type' => 'select',
        '#title' => t('Transaction mode'),
        '#description' => t('Use test mode to make transactions using test credit cards. See the Fetch integration guide for test card details.'),
        '#options' => array(
          'https://my.fetchpayments.co.nz' => t('Live'),
          'https://demo.fetchpayments.co.nz' => t('Test'),
        ),
        '#default_value' => variable_get('uc_fetch_server', 'https://my.fetchpayments.co.nz/'),
      );

      return $form;

    case 'cart-review':
      _uc_fetch_update_new_state();
      break;
  }
}

/**
 * Build the POST submission for Web Payments.
 */
function uc_fetch_form($form, &$form_state, $order) {
  $store_card = variable_get('uc_fetch_save_card', '0');
  $email_display = variable_get('uc_fetch_receipt_email', '1');

  // Basic settings.
  $data = array(
    'cmd' => '_xcart',
    'account_id' => trim(variable_get('uc_fetch_account_id', 'FIXME')),
    'notification_url' => url('uc_fetch/ipn/' . $order->order_id, array('absolute' => TRUE)),
    'return_url' => url('uc_fetch/complete', array('absolute' => TRUE)),
    'reference' => $order->order_id,
    'header_image' => trim(variable_get('uc_fetch_header_image', '')),
    'header_border_bottom' => trim(variable_get('uc_fetch_header_border_colour', '')),
    'header_background_colour' => trim(variable_get('uc_fetch_header_background_colour', '')),
    'store_card' => $store_card,
    'csc_required' => '1',
    'display_customer_email' => $email_display,
    'particular' => $order->order_id,
  );

  // Can't pass negative value line items to Web2Pay, so send as a single line item.
  $separate_line_items = TRUE;
  $product_titles = array();
  $item_titles = array();
  foreach ($order->line_items as $item) {
    $item_titles[] = $item['title'];
    if ($item['type'] == 'coupon' && $item['amount'] < 0) {
      $separate_line_items = FALSE;
    }
  }

  if (!$separate_line_items) {
    foreach ($order->products as $product) {
      $product_titles[] = $product->title;
    }
    $data['item_name1'] = t('Order @id: @titles', array(
        '@id' => $order->order_id,
        '@titles' => implode(', ', array_merge($product_titles, $item_titles)),
      ));
    $data['particular'] = implode(', ', array_merge($product_titles, $item_titles));
    $data['item_price1'] = uc_currency_format($order->order_total, FALSE, FALSE, '.');
    $data['item_code1'] = t('UC-@id', array('@id' => $order->order_id));
    $data['item_qty1'] = 1;

    // Web2Pay does not accept line items with a length of >50 chars.
    if (strlen($data['item_name1']) > 49) {
      $data['item_name1'] = substr($data['item_name1'], 0, 46) . '...';
    }
  }
  else {
    // Add a line item for each product being ordered.
    $i = 1;
    foreach ($order->products as $product) {
      // Web2Pay does not accept line items with a price of $0.00.
      if ($product->price == 0) {
        continue;
      }
      $data['item_name' . $i] = $product->title;
      // Web2Pay does not accept line items with a length of >50 chars.
      if (strlen($product->title) > 49) {
        $data['item_name' . $i] = substr($product->title, 0, 46) . '...';
      }
      $data['item_price' . $i] = uc_currency_format($product->price, FALSE, FALSE, '.');
      $data['item_code' . $i] = $product->nid;
      $data['item_qty' . $i] = $product->qty;
      $i++;
    }

    foreach ($order->line_items as $item) {
      if ($item['type'] == 'shipping' && $item['amount'] > 0) {
        $data['item_name' . $i] = $item['title'] . '(shipping)';
        $data['item_price' . $i] = uc_currency_format($item['amount'], FALSE, FALSE, '.');
        // $item['type'] ;
        $data['item_code' . $i] = '';
        $data['item_qty' . $i] = "1";
        $i++;
      }

      if ($item['type'] == 'tax' && floatval($item['amount']) > 0) {
        $data['item_name' . $i] = $item['title'];
        $data['item_price' . $i] = uc_currency_format($item['amount'], FALSE, FALSE, '.');
        // $item['type'] ;
        $data['item_code' . $i] = $i;
        $data['item_qty' . $i] = "1";
        $i++;
      }
    }
  }

  if (!empty($order->primary_email)) {
    $data['particular'] = $order->primary_email;
  }

  // Alter the POST URL and add the web2pay form variables.
  $form['#action'] = _uc_fetch_get_payment_url();
  foreach ($data as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit order'),
  );

  return $form;
}

/**
 * Page callback for Fetch MNS notification URL.
 */
function uc_fetch_verify() {
  if ($_POST) {
    $notify_url = _uc_fetch_get_verify_url();
    $post_data = _uc_fetch_creating_verify_posted_data($_POST);
    $response = _uc_fetch_callAPI($notify_url, $post_data);
    _uc_fetch_update_order_status($_POST, $response);
  }
}

/**
 * Path callback for completed transaction.
 */
function uc_fetch_complete() {
  $order_id = $_SESSION['cart_order'];
  global $user;
  if (!empty($_POST['txn_status'])) {
    switch ($_POST['txn_status']) {
      case 0:
        // Unknown transaction.
        uc_order_comment_save($order_id, $user->uid, t('Unsuccessful payment attempt. Details:<pre>@details</pre>', array('@details' => print_r($_POST,1))), 'admin');
        $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
        drupal_set_message(t('We\'re sorry, your credit card payment was unsuccessful.'), 'error');
        drupal_goto('cart/checkout');
        break;

      case 2:
        // Successful.
        $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
        drupal_goto('cart/checkout/complete');
        break;

      case 3:
        // Failed – Error.
        uc_order_comment_save($order_id, $user->uid, t('Payment attempt failed. Details:<pre>@details</pre>', array('@details' => print_r($_POST,1))), 'admin');
        $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
        drupal_set_message(t('We\'re sorry, your credit card payment failed.'), 'error');
        drupal_goto('cart/checkout');
        break;

      case 4:
        // Blocked – Transaction rules prevent this transaction taking place.
        uc_order_comment_save($order_id, $user->uid, t('Blocked payment attempt. Details:<pre>@details</pre>', array('@details' => print_r($_POST,1))), 'admin');
        $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
        drupal_set_message(t('We\'re sorry, your credit card payment was blocked.'), 'error');
        drupal_goto('cart/checkout');
        break;

      case 11:
        // Declined – Transaction was declined at the bank.
        uc_order_comment_save($order_id, $user->uid, t('Declined payment attempt. Details:<pre>@details</pre>', array('@details' => print_r($_POST,1))), 'admin');
        $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
        drupal_set_message(t('We\'re sorry, your credit card payment was declined.'), 'error');
        drupal_goto('cart/checkout');
        break;
    }
  }
  else {
    if ($order = uc_order_load($_SESSION['cart_order'])) {
      watchdog('uc_fetch', 'Order: <pre>!order</pre>', array('!order' => print_r($order,1)), WATCHDOG_DEBUG);
      // We only complete here if IPN already notified a successful transaction.
      if ($order->order_status == variable_get('uc_fetch_success_order_status', 'payment_received')) {
        //
        $_SESSION['uc_checkout'][$_SESSION['cart_order']]['do_complete'] = TRUE;
        drupal_goto('cart/checkout/complete');
      }
    }
  }
  drupal_set_message(t('We\'re sorry, your credit card payment did not complete.'), 'error');
  drupal_goto('cart/checkout');
}

/**
 * @TODO Document this function.
 */
function _uc_fetch_get_order_state_array() {
  $order_state_array = array();
  $order_array = uc_order_status_list($scope = 'all', $sql = FALSE);
  foreach ($order_array as $state) {
    $order_state_array[$state['id']] = $state['title'];
  }
  return $order_state_array;
}

/**
 * @TODO Document this function.
 */
function _uc_fetch_update_new_state() {
  $order_id = intval($_SESSION['cart_order']);
  $order_status = variable_get('uc_fetch_new_order_status', 'payment_received');
  uc_order_update_status($order_id, $order_status);
}

/**
 * Return payment URL on Fetch server.
 */
function _uc_fetch_get_payment_url() {
  $payment_url = variable_get('uc_fetch_server', 'https://my.fetchpayments.co.nz/') .
    '/webpayments/default.aspx';
  return $payment_url;
}

/**
 * Return verify URL on Fetch server.
 */
function _uc_fetch_get_verify_url() {
  $verify_url = variable_get('uc_fetch_server', 'https://my.fetchpayments.co.nz/') .
    '/webpayments/MNSHandler.aspx';
  return $verify_url;
}

/**
 * Verify submitted data.
 */
function _uc_fetch_creating_verify_posted_data($array) {
  $post_data = '';
  foreach ($array as $key => $value) {
    $post_data = $key . '=' . urlencode($value) . '&' . $post_data;
  }
  $post_data = $post_data . 'cmd=_xverify-transaction';
  return $post_data;
}

/**
 * Call Fetch API, return "VERIFIED" or "REJECTED".
 */
function _uc_fetch_callAPI($url, $post_data) {
  $response = '';
  try {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_POST, 1);
    curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($ch, CURLOPT_TIMEOUT, 100);
    curl_setopt($ch, CURLOPT_VERBOSE, 1);
    curl_setopt($ch, CURLOPT_NOPROGRESS, 0);
    $response = curl_exec($ch);
    curl_close($ch);
  }
  catch (Exception $e) {
    throw new Exception("Invalid URL", 0, $e);
  }
  return $response;
}

/**
 * Update the order status.
 */
function _uc_fetch_update_order_status($post_arr, $response) {
  $order_status = '';
  $order_id = intval($post_arr['reference']);
  $order = uc_order_load($order_id);

  if ($order == FALSE) {
    watchdog('uc_fetch', 'Order #@order_id not found.', array('@order_id' => $order_id), WATCHDOG_WARNING);
    exit();
  }

  if ($response == 'VERIFIED') {
    if (intval($post_arr['transaction_status']) == 2) {
      $order_status = variable_get('uc_fetch_success_order_status', 'in_checkout');
    }
    else {
      $order_status = variable_get('uc_fetch_failed_order_status', 'payment_received');
    }
    uc_order_update_status($order_id, $order_status);
  }
  else {
    $order_status = variable_get('uc_fetch_failed_order_status', 'payment_received');
    uc_order_update_status($order_id, $order_status);
  }
}
